The Favored, a 7 day roguelike postmortem:

When the 2009 7 day roguelike challenge was announced I had pretty much determined that as cool as it would be to enter I probably wouldn’t be. After all, I was in the middle of developing another ASCII game (ASCIIpOrtal) and wasn’t developing it very rapidly due to the time constraints of having a full time job and a family. The idea of starting a project where I’d have to teach myself line of sight and dungeon generation within these constraints did not appeal.

But then two things happened almost magically that made my entry into the 2009 7DRL challenge almost inevitable. First, in a chat with another programmer (thanks Eric( I got an idea that I thought would be simple enough that I could do it. Second, I lost my job. Welp, looks like I got the time now.

The game was called “The Favored” and it was a sort of reversal of Robotfindskitten where instead of trying to find a needle in a haystack you were trying NOT to find something. It very quickly became to me a game of statistics. Not only were you up against a ever worsening odds of the individual decision, but your cumulative odds were going down even faster.

Before the date of the challenge I had gotten most of the game together my head. I’d include levels and a persistent inventory to allow the player some sense of controlling their odds, but the inventory would have to be limited so as to prevent statistics savvy players from abusing the system, and the odds would have to overlap from level to level, again to give a sense of involvement in the odds.

And you would be killing rabbits.

Why I decided on rabbits early on and why I never deviated from that idea I don’t know. At one point they were slobbering, evil, giant, killer rabbits that each carried an amulet. A few of the amulets would be the key to the next level (so you could collect them if you like when you felt your odds were better), and one rabbit, the favored, would strike you with instant death. Any extra rabbits wouldn’t do you any good or do you any harm. The last level would be 2 rabbits. One amulet key, one favored. But of course, if you were savvy you’d not need to make that decision.

It was the inability to control that last level that convinced me to just abandon the idea in favor of stacking rabbits up to get to the next level, and not letting you carry enough to fully get to the next level so that in the end you had to kill at least one rabbit when the odds weren’t so great. But there also needed to be enough rabbits on the last level so that if you hadn’t discovered the carry over aspect yet you’d still have enough to make it.

At first I decided on levels having 25, 15, and 5 rabbits respectively, an inventory limit of 3 and needing 4 rabbits to get to the next level. As the game developed I didn’t like the way that worked out. Fortunately I had made it very easy to change those numbers in the program and did some fiddling before finally settling on 4 levels with 25, 19, 14, and 10 rabbits each, a max inventory of 4 and 6 dead bunnies needed to clear the level.

The system for displaying messages in the game is the most impressive I’ve programmed to date. It wraps words, but has to work backwards, from bottom to top so as to only show the last couple of messages. And since due to wrap it can’t be sure of how many lines it’ll need to show a message it needs to calculate all lines before it first, then show the last line, then take a step back and show the previous line. Maybe it was my previous work on Robotfindskitten and then the Numbrix Generator programs which both had progressively more complex message systems, but this one went extremely well. It even deletes old messages that it doesn’t show any more to prevent resource hogging (petite as it may be).

Being a sort of Robotfindskitten in reverse it was always my goal to have a long list of messages it would display when you kill a rabbit. Creating that list was perhaps one of the harder things in the game. In Robotfindskitten you need a list of strange random objects. Almost anything can be an object. In the Favored I was limited to verbs, and only fatal ones at that. Hard to keep variations of “You kill the creature” creative. In the end I managed to get 100 kill messages, but I’m still not sure that the quantity was worth the sacrifice of quality. There aren’t nearly enough clever lines in there now, but I’m hopeful that the future will fix that, especially since it’s only a text file that anyone can edit.

Three days before the challenge was ended I had every feature I wanted in the game, even animated intro and outro screens and in game instructions. At this point I was tempted to call it done, but I decided to give myself a 24 hour beta period, and I’m glad I did because the next day I realized I had let a few little bounds checking bugs slip past and I hadn’t put a “Do you want to play again” prompt in.

Usually 7DRLs tend to be more experimental prototypes that may (or may not) be fleshed out later, however I’m pleased at the level of polish I was able to squeeze out of my 5 days of development. And it didn’t hurt that the core idea was so simple and didn’t require much in the way of new skills learned.

While the challenge is over, there’s always the possibility of future features. At the moment there are only two features I’d like to add to this game. First of all it’s an excellent candidate for me learning to use SDL to add sound, and I’ll probably do that fairly quickly. Second, the thought of a high score table where winning the game and your odds are placement on the table. However I’m left with the question of whether beating the game with good odds, for which there is a statistical apex in this game at about 15%, or bad odds, for which you could potentially be hovering around 0%, would mean higher placement? Actually, since that would do much to improve the “roguelike” quality of this game, I guess I had better think hard about adding a high score table.
