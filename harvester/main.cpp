

#include <iostream>
#include "truecurses.h"

using namespace std;

char Map[MAPY][MAPX];
char Maps[10][61][61] = {{"############################################################",
                          "#                #                                         #",
                          "#                #                                         #",
                          "#                #                                         #",
                          "#                #                                         #",
                          "#                #                                         #",
                          "#                #  -#                                     #",
                          "#                #  -#                                     #",
                          "#                #- -#                                     #",
                          "#                #- -#                                     #",
                          "#                #   #                                     #",
                          "#                #   #                                     #",
                          "#    -#   -#     #  -#                                     #",
                          "#    -#   -#     ## -#                                     #",
                          "#    -#   -#  ####  -#                                     #",
                          "#    -#   -#     #  -#                                     #",
                          "#     #   -#     #   #                                     #",
                          "#     #   -#     #-  #                                     #",
                          "#     #   -#     #-  #                                     #",
                          "#   # #   -#     #-  #                                     #",
                          "#   # #   -#     #   #                                     #",
                          "#   # #    #     #-  #                                     #",
                          "#   # #    #     #- ##                                     #",
                          "#   # # #--#     #-  #                                     #",
                          "#   # # #  #     #- -#                                     #",
                          "#   # # #  #     #  -#        m                            #",
                          "#   # # #  #     #  -#-------------------------------------#",
                          "#   # # #  #     #  -#                                     #",
                          "#   # # #  #     #   #                                     #",
                          "#   # # #  #-----#   #                                     #",
                          "#   # # #  #     ###-#                                     #",
                          "#   # # #  #     ###-#                                     #",
                          "#   # # #  #     ###-#                                     #",
                          "#   # # #  #      K#-#                                     #",
                          "#   # # #  #    ####-#                                     #",
                          "#   # # #  #    #   -#                                     #",
                          "#   # # #  #-       -#                                     #",
                          "#   # # #  #-       -#*************** *********************#",
                          "#   # # #  #-   ##################### ######################",
                          "# #P#******#-    #                  # #                    #",
                          "# ##########-    #                  # #                    #",
                          "#          #     #                  # #                    #",
                          "#########  #*****#                  # #                    #",
                          "#       #  #######                  # #                    #",
                          "#       #      #                    # #                    #",
                          "#       #      #                    # #                    #",
                          "#    -# ##### -#                    # #                    #",
                          "#    -#     # -#   ################## ###################  #",
                          "#    -####  # -#   #                                    #  #",
                          "#    -#  #  # -#   # ################################## #  #",
                          "#    -#  #  #  #   # #                                # #  #",
                          "#    -#  #  #- #   # ##########                            #",
                          "#    -#  #  #- #   #          #                            #",
                          "#    -#  #  #- #   #######    #                            #",
                          "#    -#  #  #- #         #    #                            #",
                          "#    -#  #  #- #         #   D#                            #",
                          "#    -#  #     #         ######                            #",
                          "#     #  #  #  #                                           #",
                          "#     #  #  #  #                                           #",
                          "#&    #  #**#  #*******************************************#",
                          "############################################################",
                          // space
                         },

                         {

                          "############################################################",
                          "#                                                      # & #",
                          "#                                                      #   #",
                          "#                                                      #   #",
                          "#                                                      #   #",
                          "#                                                      #   #",
                          "#                       #############  #########       #   #",
                          "#                       #   #     # #  #       #       #   #",
                          "#                       # #-###   # ####       ######  #   #",
                          "#                       # #-# #   #                 #  #   #",
                          "#                       # #-# #   # ####-      #### ####   #",
                          "#                       # #-# ##### #  #-      #  #        #",
                          "#                       # #-# B     #  #-      #  #######  #",
                          "#                       # #-# #######  #-      #        #  #",
                          "#                       # #-#          #-      #        #  #",
                          "#                       # #-#          #-      #        #**#",
                          "#                       # #-#          #-      #        ####",
                          "#                       # #-#                  #           #",
                          "#                       # #-#                  #           #",
                          "#               ######### #-#                  #           #",
                          "#               #       # #-#                  #           #",
                          "#               #K  ### # #-# *****************#           #",
                          "#               #####   # #-# *****************#           #",
                          "#                   # ### #-# ##################           #",
                          "#      ####         # #   #-# #                #           #",
                          "#      #  ########### # ###-#                  #           #",
                          "#      #              # [ £             m      #           #",
                          "#      #             ## ########################           #",
                          "#      #                #       |           |              #",
                          "#      # ######## ##### #       |           |              #",
                          "#      # #      # #   #*#       |           |              #",
                          "#      # #      # #   #*#       |           |              #",
                          "#      # #      # #   ###       |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        |           |              #",
                          "#      # #      # #    |        =           =              #",
                          "#      # #      # #    |       ###############             #",
                          "#      # #      # #    |      ##             ##            #",
                          "#      # #      # #    |     ##               ##           #",
                          "#      # ##    ## ##   =    ##  ###       ###  ##          #",
                          "#      #  ######   ##########  ## #       # ##  ########   #",
                          "#      #                      ##  #       #  ##       D#   #",
                          "#      # ######## #############   #       #   ##########   #",
                          "#      # #      # #               #       #                #",
                          "#      # #      # #               #       #                #",
                          "#      #*#      # #               #       #                #",
                          "#      #*#      # #               #   !   #                #",
                          "#      ###      #*#               #**###**#                #",
                          "#       |       #*#               #*#####*#                #",
                          "#       |       ###               #########                #",
                          "#       |        |                 |     |                 #",
                          "#       |        |                 |     |                 #",
                          "############################################################",
                          // space
                         },

                         { "############################################################",
                          "#                                           |     |  #  &  #",
                          "#                                           |     |  #     #",
                          "#                                           |     |  #     #",
                          "# ###-                                      |     |  #  #  #",
                          "#    -                                      =     =  #  #  #",
                          "#    -                                      #     #  #  #  #",
                          "#    -                                      #     #  #  #  #",
                          "#    -                                      #     # ##  #  #",
                          "#                                           #     #  #  #  #",
                          "# #                                         #        #  #  #",
                          "# #                                         #     #  #  #  #",
                          "# ##                                        #     #  #  #  #",
                          "#    -                                      #     #  ## #  #",
                          "#    -                                      #     ## #  #  #",
                          "#                                           #    ##  #  #  #",
                          "#    -                                      #     #  #  #  #",
                          "#                                        ####     #  #  #  #",
                          "#    -                                   #        #  #  #  #",
                          "#    -                                   #D ##    #  #     #",
                          "#    -                                   ####     # ##  ## #",
                          "#    -                                      #     #  #  #  #",
                          "#    -                                      #     #  #  #  #",
                          "#                                           #     #  # ##  #",
                          "#                                           #     #  #  #  #",
                          "#                                           #     #  #  #  #",
                          "# #                                         #     ## #  #  #",
                          "# #                                         ##    #  #  #  #",
                          "# ## -                                      #     #  #  #  #",
                          "#    -                                      #     #  #  #  #",
                          "#    -                                      #*****#  #  #  #",
                          "#    -                                      #*****#  #  #  #",
                          "#    -                                      #*****# ##  #  #",
                          "#    -                                      #*****#  #  #  #",
                          "#    -                                      ##***##  #  #  #",
                          "#    -                                       #####   #  #  #",
                          "#    - £   m  £                                         #  #",
                          "#######-######                               ###### ### #  #",
                          "#     #-#    ### -- -- -- -- -- -- -- -- --###       #  #  #",
                          "#     #-#    |                               |       #  #  #",
                          "#     #-#    |                               |       #  #  #",
                          "# #####-#    |                               |       #  #  #",
                          "# #    -#    |                               |       #  # ##",
                          "# # ###-#    |                               |       #  #  #",
                          "# # # #-#    |                               |       #  #  #",
                          "# # # #-#    |                               |       #  #  #",
                          "# # # #-#    |                               |       #  #  #",
                          "# # #  -     |                               |       #  #  #",
                          "# # #  -     |                               |       #  #  #",
                          "# # #  -     |                               |       #  #  #",
                          "# # #  -     |                               |       #  #  #",
                          "# # #  -     |                               |       #  #  #",
                          "# # #  -     |                               |       |  |  #",
                          "# #    -     |                               |       |  |  #",
                          "# # #####    |                               |       |  |  #",
                          "# #  # |     |                               |       |  |  #",
                          "# # K# |     |                               |       |  |  #",
                          "# #### |     |                               |       |  |  #",
                          "#  |   |     |                               |       |  |  #",
                          "#**|***|*****|*******************************|*******|**|**#",
                          "############################################################",
                          // space
                         },

                         {"############################################################",
                          "#                                                          #",
                          "#          #                                               #",
                          "#          #                                               #",
                          "#     #    #          #                                    #",
                          "#     #    #          #                                    #",
                          "#     #    #     #    #   £     m  m   £                   #",
                          "#     #    #     #    #    ############                    #",
                          "#&    #    #     #    #                          #         #",
                          "###   #    #     #    #                          |         #",
                          "#     #    #     #                               |         #",
                          "#     #          #                               |         #",
                          "#     #          #                               |         #",
                          "#                                                |         #",
                          "#                                              ##|         #",
                          "#                                                |         #",
                          "#                                            ##  |         #",
                          "#                          # # ## ## ##### #     |         #",
                          "#                          # #                   |         #",
                          "#                          # #                   |         #",
                          "#                          #                     |         #",
                          "#                          #                     |         #",
                          "#                          #                     |         #",
                          "#                          # K                   |         #",
                          "#                          ###                   |         #",
                          "#                                                |         #",
                          "#************************************************|         #",
                          "#************************************************|         #",
                          "#************************************************|         #",
                          "#####################################################   ####",
                          "# =                                              =         #",
                          "# |                                              |         #",
                          "# |                                              |         #",
                          "# |                                                        #",
                          "#               £    m       m       £                     #",
                          "# |  ##### ###   ####################  ###  ######         #",
                          "# |   | |   |      |              |     |    |   |         #",
                          "# |***|*|***|******|**************|*****|****|***|         #",
                          "# ################################################    #    #",
                          "#    |                                           =         #",
                          "#    |                                           |         #",
                          "#    |                                           |*********#",
                          "#    |                                           ###########",
                          "#    |                                           =  =   =  #",
                          "#    |                                              |   |  #",
                          "#    |                                       ####|     D|  #",
                          "#                                           ##   |  #####  #",
                          "#    |#       £          m           £     ##    |         #",
                          "#    |         ######################            |         #",
                          "#    | £         m                         m  £  |         #",
                          "#    |  ######################################   |         #",
                          "#    |                                           |         #",
                          "#    |                                           |         #",
                          "#    |*******************************************|         #",
                          "#    #############################################         #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#**********************************************************#",
                          "##********************************************************##",
                          " ########################################################## ",
                        },

                        { "############################################################",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#          #                                               #",
                          "#          #                                               #",
                          "#          #                                               #",
                          "#          #                                               #",
                          "#          #                                               #",
                          "#          #          £       m          m         £    &  #",
                          "###        ########    #############################    ####",
                          "#**********************************************************#",
                          "#**********************************************************#",
                          "############################################################"}
                          ,

                        { "############################################################",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "#                                                          #",
                          "############################################################"}
                        };
PLAYER p1;
int p1_fade_x;
int p1_fade_y;
bool in_air = false;
bool jumping = false;
bool GlideWall = false;
bool hangOff = false;
int jumpcount = 0;
int jumpheight = 5;
int jumpheightmax = 5;
int jumpheight_step_max = 25;
int sleepjumpcount = 0;
int sleepjumpmax = 2;
int pull = 0;
char dir = 'r';
int points = 0;
int walljumpcount = 0;
int walljump = 5;
int wallglidecount = 0;
int wallglide = 3;
int in_map = 0;
int stay = 3;
int attack_count = 0;
int attack_speed = 3;
int staycount = 0;
string message = "";
bool has_key = false;
bool Dead = false;
bool can_walljump = false;
bool can_grind = false;
bool can_hang = false;
bool can_attack = false;
int speed = 70;

class monster {
public:
    int y;
    int x;
    int hp;
    bool dead;
    bool movingLeft;
};

monster mon[20];

PASSABLE PASS[100] = { '.',' ','-','£' };

int getMapSizeX(int scale_factor) {
    return MAPX / scale_factor;
}

int getMapSizeY(int scale_factor) {
    return MAPY / scale_factor;
}

void initPlayer() {
    for (int i = 0; i < 20; i++) {
        mon[i].dead = true;
        mon[i].hp = 2;
    }
    int mons = 0;
    p1.hp = 10;
    for (int y = 0; y < getMapSizeY(8); y++) {
        for (int x = 0; x < getMapSizeX(8); x++) {
            if (Map[y][x] == '&') {
                Map[y][x] = ' ';
                p1.y = y;
                p1.x = x;
            } else if (Map[y][x] == 'm') {
                mon[mons].dead = false;
                Map[y][x] = ' ';
                mon[mons].x = x;
                mon[mons].y = y;
                mons += 1;
            }
        }
    }
    p1.c = '@';
}

void Draw_Monsters() {
    for (int i = 0; i < 20; i++) {
        if (mon[i].dead == false) {
            if ( in_range(mon[i].y,mon[i].x,p1.y,p1.x,20) && los(mon[i].y,mon[i].x,p1.y,p1.x,'#',Map) ) {
                mvaddch(mon[i].y,mon[i].x,c_char('M'),COLOR_RED,COLOR_BLACK);
            }
        }
    }
}

void Move_Monsters() {
    for (int i = 0; i < 20; i++) {
        if (mon[i].hp <= 0) {
            mon[i].dead = true;
        }
        if (mon[i].dead == false) {
            if (mon[i].movingLeft == true) {
                if (mon[i].y == p1.y) {
                    if (mon[i].x == p1.x-1) {
                        p1.hp -= 1;
                    } else {
                        if (Map[mon[i].y][mon[i].x-1] == '£') {
                            mon[i].movingLeft = false;
                        } else if (Map[mon[i].y][mon[i].x-1] == ' ') {
                            mon[i].x--;
                        } else if (Map[mon[i].y][mon[i].x-1] == '#') {
                            mon[i].movingLeft = false;
                        }
                    }
                } else {
                    if (Map[mon[i].y][mon[i].x-1] == '£') {
                        mon[i].movingLeft = false;
                    } else if (Map[mon[i].y][mon[i].x-1] == ' ') {
                        mon[i].x--;
                    } else if (Map[mon[i].y][mon[i].x-1] == '#') {
                        mon[i].movingLeft = false;
                    }
                }
            } else {
                if (mon[i].y == p1.y) {
                    if (mon[i].x == p1.x+1) {
                        p1.hp -= 1;
                    } else {
                        if (Map[mon[i].y][mon[i].x+1] == '£') {
                            mon[i].movingLeft = true;
                        } else if (Map[mon[i].y][mon[i].x+1] == ' ') {
                            mon[i].x++;
                        } else if (Map[mon[i].y][mon[i].x+1] == '#') {
                            mon[i].movingLeft = true;
                        }
                    }
                } else {
                    if (Map[mon[i].y][mon[i].x+1] == '£') {
                        mon[i].movingLeft = true;
                    } else if (Map[mon[i].y][mon[i].x+1] == ' ') {
                        mon[i].x++;
                    } else if (Map[mon[i].y][mon[i].x+1] == '#') {
                        mon[i].movingLeft = true;
                    }
                }
            }
        }
    }
}

void SetMap(int id) {
    for (int y = 0; y < 61; y++) {
        for (int x = 0; x < 61; x++) {
            Map[y][x] = Maps[id][y][x];
        }
    }
    message = "";
}

void MainMenu() {
}

int PlayerMovementX(char M[MAPY][MAPX],int y0,int x0,PASSABLE pass[100]) {
    for (int i = 0; i < 100; i++) {
        if (key[KEY_RIGHT]) {
            dir = 'r';
            if (hangOff == false) {
                if (mvgetch(M,y0,x0+1) == pass[i]) {
                    GlideWall = false;
                    return x0+1;
                }
            }
            if (mvgetch(M,y0,x0+1) == '#') {
                if (can_grind == true) {
                    p1.c = '"';
                    GlideWall = true;
                }
                if (mvgetch(M,y0-1,x0+1) == pass[i]) {
                    if (in_air == true) {
                        if (can_hang == true) {
                            hangOff = true;
                        }
                    }
                }
                if (hangOff == false) {
                    if (can_walljump == true) {
                        if (getkey(KEY_UP)) {
                            if (walljumpcount < walljump) {
                                jumpcount = 0;
                                in_air = true;
                                jumping = true;
                                jumpheight = jumpheightmax + jumpcount;
                                walljumpcount++;
                                return x0;
                            }
                        }
                    }
                }
            } else if (mvgetch(M,y0,x0+1) == 'B') {
                if (mvgetch(M,y0,x0-2) == '[') {
                    Map[y0][(x0-1)] = ' ';
                    Map[y0][(x0-3)] = 'B';
                    return x0-1;
                } else if (mvgetch(M,y0,x0+2) == ' ') {
                    Map[y0][(x0+1)] = ' ';
                    Map[y0][(x0+2)] = 'B';
                    return x0+1;
                } else if (mvgetch(M,y0,x0+2) == '£') {
                    Map[y0][(x0+1)] = ' ';
                    Map[y0][(x0+2)] = 'B';
                    return x0+1;
                }
            } else if (mvgetch(M,y0,x0+1) == 'K') {
                Map[y0][(x0+1)] = ' ';
                has_key = true;
                return x0+1;
            } else if (mvgetch(M,y0,x0+1) == '!') {
                can_walljump = true;
                can_grind = true;
                can_hang = true;
                can_attack = true;
                Map[y0][x0+1] = ' ';
                message = "You picked up some ninja gear!";
            } else if (mvgetch(M,y0,x0+1) == 'D') {
                if (has_key == true) {
                    in_map++;
                    SetMap(in_map);
                    initPlayer();
                    has_key = false;
                    return p1.x;
                }
            }



        } else if (key[KEY_LEFT]) {
            dir = 'l';
            if (hangOff == false) {
                if (mvgetch(M,y0,x0-1) == pass[i]) {
                    GlideWall = false;
                    return x0-1;
                }
            }
            if (mvgetch(M,y0,x0-1) == '#') {
                if (can_grind == true) {
                    p1.c = '"';
                    GlideWall = true;
                }
                if (mvgetch(M,y0-1,x0-1) == pass[i]) {
                    if (in_air == true) {
                        if (can_hang == true) {
                            hangOff = true;
                        }
                    }
                }
                if (hangOff == false) {
                    if (can_walljump == true) {
                        if (getkey(KEY_UP)) {
                            if (walljumpcount < walljump) {
                                jumpcount = 0;
                                in_air = true;
                                jumping = true;
                                jumpheight = jumpheightmax + jumpcount;
                                walljumpcount++;
                                return x0;
                            }
                        }
                    }
                }
            } else if (mvgetch(M,y0,x0-1) == 'B') {
                if (mvgetch(M,y0,x0-2) == '[') {
                    Map[y0][(x0-1)] = ' ';
                    Map[y0][(x0-3)] = 'B';
                    return x0-1;
                } else if (mvgetch(M,y0,x0-2) == ' ') {
                    Map[y0][(x0-1)] = ' ';
                    Map[y0][(x0-2)] = 'B';
                    return x0-1;
                } else if (mvgetch(M,y0,x0-2) == '£') {
                    Map[y0][(x0-1)] = ' ';
                    Map[y0][(x0-2)] = 'B';
                    return x0-1;
                }
            } else if (mvgetch(M,y0,x0-1) == 'K') {
                Map[y0][(x0-1)] = ' ';
                has_key = true;
                return x0-1;
            } else if (mvgetch(M,y0,x0-1) == '!') {
                can_walljump = true;
                can_grind = true;
                can_hang = true;
                can_attack = true;
                Map[y0][x0-1] = ' ';
                message = "You picked up some ninja gear!";
            } else if (mvgetch(M,y0,x0-1) == 'D') {
                if (has_key == true) {
                    in_map++;
                    SetMap(in_map);
                    initPlayer();
                    has_key = false;
                    return p1.x;
                }
            }
        } else {
            GlideWall = false;
        }
    }
    return x0;
}

void PlayerMovement() {
    if (p1.hp <= 0) {
        Dead = true;
    }
    if (Dead == true) {
        SetMap(in_map);
        initPlayer();
        has_key = false;
        Dead = false;
    }
    //int tpx = p1.x;
    p1.x = PlayerMovementX(Map,p1.y,p1.x,PASS);
    if (getkey(KEY_DOWN)) {
        hangOff = false;
        if (Map[p1.y+1][p1.x] == '-') {
            p1.y++;
        } else if (Map[p1.y][p1.x] == '-') {
            if (Map[p1.y+1][p1.x] == ' ') {
                p1.y++;
            } else if (Map[p1.y+1][p1.x] == '£') {
                p1.y++;
            }
        }
    }
    if (getkey(KEY_UP)) {
        if (Map[p1.y-1][p1.x] == '-') {
            p1.y--;
        } else if (Map[p1.y][p1.x] == '-') {
            if (Map[p1.y-1][p1.x] == ' ') {
                p1.y--;
            } else if (Map[p1.y-1][p1.x] == '£') {
                p1.y--;
            }
        }
    }
    if (can_attack == true)
    {
    if (attack_count >= attack_speed) {
        if (getkey(KEY_SPACE)) {
            if (dir == 'r') {
                mvaddch(p1.y,p1.x+1,c_char(')'),COLOR_WHITE,COLOR_BLACK);
                mvaddch(p1.y,p1.x+2,c_char(')'),COLOR_WHITE,COLOR_BLACK);
                refresh();
                napms(120);
                for (int i = 0; i < 20; i++) {
                    if (mon[i].dead == false) {
                        if (mon[i].y == p1.y) {
                            if (mon[i].x == p1.x+1) {
                                mon[i].hp -= 1;
                            } else if (mon[i].x == p1.x+2) {
                                mon[i].hp -= 1;
                            }
                        }
                    }
                }
                attack_count = 0;
            }
            if (dir == 'l') {
                mvaddch(p1.y,p1.x-1,c_char('('),COLOR_WHITE,COLOR_BLACK);
                mvaddch(p1.y,p1.x-2,c_char('('),COLOR_WHITE,COLOR_BLACK);
                refresh();
                napms(120);
                for (int i = 0; i < 20; i++) {
                    if (mon[i].dead == false) {
                        if (mon[i].y == p1.y) {
                            if (mon[i].x == p1.x-1) {
                                mon[i].hp -= 1;
                            } else if (mon[i].x == p1.x-2) {
                                mon[i].hp -= 1;
                            }
                        }
                    }
                }
                attack_count = 0;
            }
        }
    } else {
        attack_count++;
    }
    }
    // jumping
    if (jumping == true) {
        if (jumpheight > jumpheight_step_max) {
            jumpheight = jumpheight_step_max;
        }
        if (jumpcount < jumpheight) {
            int jumpg = (p1.y - 1);
            switch (Map[jumpg][p1.x]) {
            case ' ': {
                p1.y--;
                jumpcount++;
                hangOff = false;
            }
            break;
            case '£': {
                p1.y--;
                jumpcount++;
                hangOff = false;
            }
            break;
            default: {
                jumpcount = (jumpheight+1);
            }
            break;
            }
        } else {
            if (staycount < stay) {
                staycount++;

            } else {
                jumping = false;
            }
        }
    } else {
        if (Map[p1.y][p1.x] != '-') {// gravity
            if (hangOff == false) {
                if (wallglidecount > wallglide) {
                    int grav = (p1.y + 1);
                    switch (Map[grav][p1.x]) {
                    case ' ': { // in air = true
                        in_air = true;
                    }
                    break;
                    case '£': { // in air = true
                        in_air = true;
                    }
                    break;
                    case 'P': {
                        jumpcount = 0;
                        in_air = true;
                        jumping = true;
                        jumpheight += 5;
                    }
                    break;
                    case '*': {
                        Dead = true;
                    }
                    break;
                    default: { // solid
                        in_air = false;
                        jumpheight = jumpheightmax;
                        walljumpcount = 0;
                    }
                    break;
                    }
                    if (in_air == true) {
                        p1.y++;
                    }
                    wallglidecount = 0;
                    if (GlideWall == true) {
                        wallglidecount = 0;
                    } else {
                        wallglidecount = wallglide+1;
                    }
                } else {
                    wallglidecount++;
                }
            }
        }
    }
    if (hangOff == false) {
        if (in_air == false) {
            if (jumping == false) {
                if (sleepjumpcount > sleepjumpmax) {
                    if (getkey(KEY_UP)) {
                        jumpcount = 0;
                        in_air = true;
                        jumping = true;
                        jumpheight = jumpheightmax;
                        sleepjumpcount = 0;
                    }
                } else {
                    sleepjumpcount++;
                }
            }
        }
    } else {
        if (jumping == false) {
            if (sleepjumpcount > sleepjumpmax) {
                if (getkey(KEY_UP)) {
                    hangOff = false;
                    jumpcount = 0;
                    in_air = true;
                    jumping = true;
                    staycount = 0;
                    jumpheight = jumpheightmax;
                    sleepjumpcount = 0;
                }
            } else {
                sleepjumpcount++;
            }
        }
    }
}

void DrawMap() {
    for (int y = 0; y < 61; y++) {
        for (int x = 0; x < 61; x++) {
            if (Map[y][x] != 0) {
                if ( in_range(y,x,p1.y,p1.x,20) && los(y,x,p1.y,p1.x,'#',Map) ) {
                    if (Map[y][x] == '#') {
                        //mvaddch(y,x,c_char(Map[y][x]),color(50,50,50),color(50,50,50));
                    } else if (Map[y][x] == 'B') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_BLUE,COLOR_BLACK);
                    } else if (Map[y][x] == '£') {
                        mvaddch(y,x,c_char(' '),COLOR_BLUE,COLOR_BLACK);
                    } else if (Map[y][x] == 'K') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_YELLOW,COLOR_BLACK);
                    } else if (Map[y][x] == 'D') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_CYAN,COLOR_BLACK);
                    } else if (Map[y][x] == '*') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_RED,COLOR_BLACK);
                    } else if (Map[y][x] == 'P') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_PURPLE,COLOR_BLACK);
                    } else if (Map[y][x] == 'P') {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_PURPLE,COLOR_BLACK);
                    } else {
                        mvaddch(y,x,c_char(Map[y][x]),COLOR_WHITE,COLOR_BLACK);
                    }
                }
            }
        }
    }
    if (message != "") {
        mvprintw(62,0,message.c_str(),COLOR_RED,COLOR_BLACK);
    }
}

void BlockGrav() {
    int tpx = 0;
    int tpy = 0;
    for (int y = 0; y < getMapSizeY(8); y++) {
        for (int x = 0; x < getMapSizeX(8); x++) {
            if (Map[y][x] == 'B') {
                if (Map[(y+1)][x] == ' ') {
                    if ( (y != tpy) && (x != tpx) ) {
                        tpx = x;
                        tpy = y;
                        Map[y][x] = ' ';
                        Map[(y+1)][x] = 'B';
                    }
                }
            }
        }
    }
}
void DrawGUI() {

}

void DrawPlayer() {

    Solid_LightSource(Map,'#',' ',p1.y,p1.x,20,false,color(75,75,75),COLOR_BLACK,color(10,10,10),COLOR_BLACK);
    Solid_LightSource(Map,'#',' ',p1.y,p1.x,5,false,COLOR_WHITE,COLOR_BLACK,color(10,10,10),COLOR_BLACK);
    DrawMap();
    mvaddch(p1.y,p1.x,c_char(p1.c),COLOR_RED,COLOR_BLACK);
    p1.c = '@';
}


void StartGame() {
    bool endgame = false;
    while (endgame == false) {
        // movement and keys
        Move_Monsters();
        PlayerMovement();
        BlockGrav();
        if (getkey(KEY_ESC)) {
            endgame = true;
        }
        if (getkey(KEY_1)) {
            speed--;
        }
        if (getkey(KEY_2)) {
            speed++;
        }
        // drawing
        clear();
        //DrawMap();
        DrawPlayer();
        Draw_Monsters();
        refresh();
        napms(speed);

    }
}

int main(int argc, char *argv[]) {
    initscr(488,488,bt24,8,GFX_AUTODETECT_WINDOWED);
    in_map = 0;
    SetMap(in_map);
    initPlayer();
    StartGame();
    freebuf();
    return 0;
}
END_OF_MAIN();
